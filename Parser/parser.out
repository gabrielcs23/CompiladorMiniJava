Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    OP_GREATER
    OP_GREATER_EQ
    OP_LESSER_EQ
    WHITESPACE

Grammar

Rule 0     S' -> prog
Rule 1     prog -> main classe_r
Rule 2     classe_r -> classe_r classe
Rule 3     classe_r -> empty
Rule 4     main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY
Rule 5     classe -> RW_CLASS ID extends_o LCURLY var_r metodo_r RCURLY
Rule 6     extends_o -> RW_EXTENDS ID
Rule 7     extends_o -> empty
Rule 8     var -> tipo ID P_SEMICOLON
Rule 9     metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY
Rule 10    metodo_r -> metodo_r metodo
Rule 11    metodo_r -> empty
Rule 12    var_r -> var_r var
Rule 13    var_r -> empty
Rule 14    cmd_r -> cmd_r cmd
Rule 15    cmd_r -> empty
Rule 16    params -> tipo ID tipo_r
Rule 17    tipo_r -> P_COMMA tipo ID tipo_r
Rule 18    tipo_r -> empty
Rule 19    params_o -> params
Rule 20    params_o -> empty
Rule 21    tipo -> RW_INT LBRACK RBRACK
Rule 22    tipo -> RW_BOOLEAN
Rule 23    tipo -> RW_INT
Rule 24    tipo -> ID
Rule 25    cmd -> LCURLY cmd_r RCURLY
Rule 26    cmd -> RW_IF LPAREN exp RPAREN cmd
Rule 27    cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd
Rule 28    cmd -> RW_WHILE LPAREN exp RPAREN cmd
Rule 29    cmd -> RW_SOUT LPAREN exp RPAREN P_SEMICOLON
Rule 30    cmd -> ID OP_ATTR exp P_SEMICOLON
Rule 31    cmd -> ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON
Rule 32    exp -> exp OP_AND rexp
Rule 33    exp -> rexp
Rule 34    rexp -> rexp OP_LESSER aexp
Rule 35    rexp -> rexp OP_EQUAL aexp
Rule 36    rexp -> rexp OP_NOT_EQUAL aexp
Rule 37    rexp -> aexp
Rule 38    aexp -> aexp OP_PLUS mexp
Rule 39    aexp -> aexp OP_MINUS mexp
Rule 40    aexp -> mexp
Rule 41    mexp -> mexp OP_MULTIPLY sexp
Rule 42    mexp -> mexp OP_DIVISION sexp
Rule 43    mexp -> sexp
Rule 44    sexp -> OP_NOT sexp
Rule 45    sexp -> OP_MINUS sexp
Rule 46    sexp -> RW_TRUE
Rule 47    sexp -> RW_FALSE
Rule 48    sexp -> RW_NULL
Rule 49    sexp -> NUMBER
Rule 50    sexp -> RW_NEW RW_INT LBRACK exp RBRACK
Rule 51    sexp -> pexp P_POINT RW_LENGTH
Rule 52    sexp -> pexp LBRACK exp RBRACK
Rule 53    sexp -> pexp
Rule 54    pexp -> ID
Rule 55    pexp -> RW_THIS
Rule 56    pexp -> RW_NEW ID LPAREN RPAREN
Rule 57    pexp -> LPAREN exp RPAREN
Rule 58    pexp -> pexp P_POINT ID
Rule 59    pexp -> pexp P_POINT ID LPAREN exps_o RPAREN
Rule 60    exps_o -> exps
Rule 61    exps_o -> empty
Rule 62    exps -> exp exp_r
Rule 63    exp_r -> exp_r P_COMMA exp
Rule 64    exp_r -> empty
Rule 65    empty -> <empty>

Terminals, with rules where they appear

COMMENT              :
ID                   : 4 4 5 6 8 9 16 17 24 30 31 54 56 58 59
LBRACK               : 4 21 31 50 52
LCURLY               : 4 4 5 9 25
LPAREN               : 4 9 26 27 28 29 56 57 59
NUMBER               : 49
OP_AND               : 32
OP_ATTR              : 30 31
OP_DIVISION          : 42
OP_EQUAL             : 35
OP_GREATER           :
OP_GREATER_EQ        :
OP_LESSER            : 34
OP_LESSER_EQ         :
OP_MINUS             : 39 45
OP_MULTIPLY          : 41
OP_NOT               : 44
OP_NOT_EQUAL         : 36
OP_PLUS              : 38
P_COMMA              : 17 63
P_POINT              : 51 58 59
P_SEMICOLON          : 8 9 29 30 31
RBRACK               : 4 21 31 50 52
RCURLY               : 4 4 5 9 25
RPAREN               : 4 9 26 27 28 29 56 57 59
RW_BOOLEAN           : 22
RW_CLASS             : 4 5
RW_ELSE              : 27
RW_EXTENDS           : 6
RW_FALSE             : 47
RW_IF                : 26 27
RW_INT               : 21 23 50
RW_LENGTH            : 51
RW_MAIN              : 4
RW_NEW               : 50 56
RW_NULL              : 48
RW_PUBLIC            : 4 9
RW_RETURN            : 9
RW_SOUT              : 29
RW_STATIC            : 4
RW_STRING            : 4
RW_THIS              : 55
RW_TRUE              : 46
RW_VOID              : 4
RW_WHILE             : 28
WHITESPACE           :
error                :

Nonterminals, with rules where they appear

aexp                 : 34 35 36 37 38 39
classe               : 2
classe_r             : 1 2
cmd                  : 4 14 26 27 27 28
cmd_r                : 9 14 25
empty                : 3 7 11 13 15 18 20 61 64
exp                  : 9 26 27 28 29 30 31 31 32 50 52 57 62 63
exp_r                : 62 63
exps                 : 60
exps_o               : 59
extends_o            : 5
main                 : 1
metodo               : 10
metodo_r             : 5 10
mexp                 : 38 39 40 41 42
params               : 19
params_o             : 9
pexp                 : 51 52 53 58 59
prog                 : 0
rexp                 : 32 33 34 35 36
sexp                 : 41 42 43 44 45
tipo                 : 8 9 16 17
tipo_r               : 16 17
var                  : 12
var_r                : 5 9 12

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . main classe_r
    (4) main -> . RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY

    RW_CLASS        shift and go to state 3

    prog                           shift and go to state 1
    main                           shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> main . classe_r
    (2) classe_r -> . classe_r classe
    (3) classe_r -> . empty
    (65) empty -> .

    RW_CLASS        reduce using rule 65 (empty -> .)
    $end            reduce using rule 65 (empty -> .)

    classe_r                       shift and go to state 4
    empty                          shift and go to state 5

state 3

    (4) main -> RW_CLASS . ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY

    ID              shift and go to state 6


state 4

    (1) prog -> main classe_r .
    (2) classe_r -> classe_r . classe
    (5) classe -> . RW_CLASS ID extends_o LCURLY var_r metodo_r RCURLY

    $end            reduce using rule 1 (prog -> main classe_r .)
    RW_CLASS        shift and go to state 8

    classe                         shift and go to state 7

state 5

    (3) classe_r -> empty .

    RW_CLASS        reduce using rule 3 (classe_r -> empty .)
    $end            reduce using rule 3 (classe_r -> empty .)


state 6

    (4) main -> RW_CLASS ID . LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY

    LCURLY          shift and go to state 9


state 7

    (2) classe_r -> classe_r classe .

    RW_CLASS        reduce using rule 2 (classe_r -> classe_r classe .)
    $end            reduce using rule 2 (classe_r -> classe_r classe .)


state 8

    (5) classe -> RW_CLASS . ID extends_o LCURLY var_r metodo_r RCURLY

    ID              shift and go to state 10


state 9

    (4) main -> RW_CLASS ID LCURLY . RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY

    RW_PUBLIC       shift and go to state 11


state 10

    (5) classe -> RW_CLASS ID . extends_o LCURLY var_r metodo_r RCURLY
    (6) extends_o -> . RW_EXTENDS ID
    (7) extends_o -> . empty
    (65) empty -> .

    RW_EXTENDS      shift and go to state 13
    LCURLY          reduce using rule 65 (empty -> .)

    extends_o                      shift and go to state 12
    empty                          shift and go to state 14

state 11

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC . RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY

    RW_STATIC       shift and go to state 15


state 12

    (5) classe -> RW_CLASS ID extends_o . LCURLY var_r metodo_r RCURLY

    LCURLY          shift and go to state 16


state 13

    (6) extends_o -> RW_EXTENDS . ID

    ID              shift and go to state 17


state 14

    (7) extends_o -> empty .

    LCURLY          reduce using rule 7 (extends_o -> empty .)


state 15

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC . RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY

    RW_VOID         shift and go to state 18


state 16

    (5) classe -> RW_CLASS ID extends_o LCURLY . var_r metodo_r RCURLY
    (12) var_r -> . var_r var
    (13) var_r -> . empty
    (65) empty -> .

    RW_INT          reduce using rule 65 (empty -> .)
    RW_BOOLEAN      reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)
    RCURLY          reduce using rule 65 (empty -> .)
    RW_PUBLIC       reduce using rule 65 (empty -> .)

    var_r                          shift and go to state 19
    empty                          shift and go to state 20

state 17

    (6) extends_o -> RW_EXTENDS ID .

    LCURLY          reduce using rule 6 (extends_o -> RW_EXTENDS ID .)


state 18

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID . RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY

    RW_MAIN         shift and go to state 21


state 19

    (5) classe -> RW_CLASS ID extends_o LCURLY var_r . metodo_r RCURLY
    (12) var_r -> var_r . var
    (10) metodo_r -> . metodo_r metodo
    (11) metodo_r -> . empty
    (8) var -> . tipo ID P_SEMICOLON
    (65) empty -> .
    (21) tipo -> . RW_INT LBRACK RBRACK
    (22) tipo -> . RW_BOOLEAN
    (23) tipo -> . RW_INT
    (24) tipo -> . ID

    RCURLY          reduce using rule 65 (empty -> .)
    RW_PUBLIC       reduce using rule 65 (empty -> .)
    RW_INT          shift and go to state 27
    RW_BOOLEAN      shift and go to state 28
    ID              shift and go to state 22

    metodo_r                       shift and go to state 23
    var                            shift and go to state 24
    empty                          shift and go to state 25
    tipo                           shift and go to state 26

state 20

    (13) var_r -> empty .

    RW_INT          reduce using rule 13 (var_r -> empty .)
    RW_BOOLEAN      reduce using rule 13 (var_r -> empty .)
    ID              reduce using rule 13 (var_r -> empty .)
    RCURLY          reduce using rule 13 (var_r -> empty .)
    RW_PUBLIC       reduce using rule 13 (var_r -> empty .)
    RW_RETURN       reduce using rule 13 (var_r -> empty .)
    LCURLY          reduce using rule 13 (var_r -> empty .)
    RW_IF           reduce using rule 13 (var_r -> empty .)
    RW_WHILE        reduce using rule 13 (var_r -> empty .)
    RW_SOUT         reduce using rule 13 (var_r -> empty .)


state 21

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN . LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY

    LPAREN          shift and go to state 29


state 22

    (24) tipo -> ID .

    ID              reduce using rule 24 (tipo -> ID .)


state 23

    (5) classe -> RW_CLASS ID extends_o LCURLY var_r metodo_r . RCURLY
    (10) metodo_r -> metodo_r . metodo
    (9) metodo -> . RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY

    RCURLY          shift and go to state 30
    RW_PUBLIC       shift and go to state 32

    metodo                         shift and go to state 31

state 24

    (12) var_r -> var_r var .

    RW_INT          reduce using rule 12 (var_r -> var_r var .)
    RW_BOOLEAN      reduce using rule 12 (var_r -> var_r var .)
    ID              reduce using rule 12 (var_r -> var_r var .)
    RCURLY          reduce using rule 12 (var_r -> var_r var .)
    RW_PUBLIC       reduce using rule 12 (var_r -> var_r var .)
    RW_RETURN       reduce using rule 12 (var_r -> var_r var .)
    LCURLY          reduce using rule 12 (var_r -> var_r var .)
    RW_IF           reduce using rule 12 (var_r -> var_r var .)
    RW_WHILE        reduce using rule 12 (var_r -> var_r var .)
    RW_SOUT         reduce using rule 12 (var_r -> var_r var .)


state 25

    (11) metodo_r -> empty .

    RCURLY          reduce using rule 11 (metodo_r -> empty .)
    RW_PUBLIC       reduce using rule 11 (metodo_r -> empty .)


state 26

    (8) var -> tipo . ID P_SEMICOLON

    ID              shift and go to state 33


state 27

    (21) tipo -> RW_INT . LBRACK RBRACK
    (23) tipo -> RW_INT .

    LBRACK          shift and go to state 34
    ID              reduce using rule 23 (tipo -> RW_INT .)


state 28

    (22) tipo -> RW_BOOLEAN .

    ID              reduce using rule 22 (tipo -> RW_BOOLEAN .)


state 29

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN . RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY

    RW_STRING       shift and go to state 35


state 30

    (5) classe -> RW_CLASS ID extends_o LCURLY var_r metodo_r RCURLY .

    RW_CLASS        reduce using rule 5 (classe -> RW_CLASS ID extends_o LCURLY var_r metodo_r RCURLY .)
    $end            reduce using rule 5 (classe -> RW_CLASS ID extends_o LCURLY var_r metodo_r RCURLY .)


state 31

    (10) metodo_r -> metodo_r metodo .

    RCURLY          reduce using rule 10 (metodo_r -> metodo_r metodo .)
    RW_PUBLIC       reduce using rule 10 (metodo_r -> metodo_r metodo .)


state 32

    (9) metodo -> RW_PUBLIC . tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY
    (21) tipo -> . RW_INT LBRACK RBRACK
    (22) tipo -> . RW_BOOLEAN
    (23) tipo -> . RW_INT
    (24) tipo -> . ID

    RW_INT          shift and go to state 27
    RW_BOOLEAN      shift and go to state 28
    ID              shift and go to state 22

    tipo                           shift and go to state 36

state 33

    (8) var -> tipo ID . P_SEMICOLON

    P_SEMICOLON     shift and go to state 37


state 34

    (21) tipo -> RW_INT LBRACK . RBRACK

    RBRACK          shift and go to state 38


state 35

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING . LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY

    LBRACK          shift and go to state 39


state 36

    (9) metodo -> RW_PUBLIC tipo . ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY

    ID              shift and go to state 40


state 37

    (8) var -> tipo ID P_SEMICOLON .

    RW_INT          reduce using rule 8 (var -> tipo ID P_SEMICOLON .)
    RW_BOOLEAN      reduce using rule 8 (var -> tipo ID P_SEMICOLON .)
    ID              reduce using rule 8 (var -> tipo ID P_SEMICOLON .)
    RCURLY          reduce using rule 8 (var -> tipo ID P_SEMICOLON .)
    RW_PUBLIC       reduce using rule 8 (var -> tipo ID P_SEMICOLON .)
    RW_RETURN       reduce using rule 8 (var -> tipo ID P_SEMICOLON .)
    LCURLY          reduce using rule 8 (var -> tipo ID P_SEMICOLON .)
    RW_IF           reduce using rule 8 (var -> tipo ID P_SEMICOLON .)
    RW_WHILE        reduce using rule 8 (var -> tipo ID P_SEMICOLON .)
    RW_SOUT         reduce using rule 8 (var -> tipo ID P_SEMICOLON .)


state 38

    (21) tipo -> RW_INT LBRACK RBRACK .

    ID              reduce using rule 21 (tipo -> RW_INT LBRACK RBRACK .)


state 39

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK . RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY

    RBRACK          shift and go to state 41


state 40

    (9) metodo -> RW_PUBLIC tipo ID . LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY

    LPAREN          shift and go to state 42


state 41

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK . ID RPAREN LCURLY cmd RCURLY RCURLY

    ID              shift and go to state 43


state 42

    (9) metodo -> RW_PUBLIC tipo ID LPAREN . params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY
    (19) params_o -> . params
    (20) params_o -> . empty
    (16) params -> . tipo ID tipo_r
    (65) empty -> .
    (21) tipo -> . RW_INT LBRACK RBRACK
    (22) tipo -> . RW_BOOLEAN
    (23) tipo -> . RW_INT
    (24) tipo -> . ID

    RPAREN          reduce using rule 65 (empty -> .)
    RW_INT          shift and go to state 27
    RW_BOOLEAN      shift and go to state 28
    ID              shift and go to state 22

    tipo                           shift and go to state 44
    params_o                       shift and go to state 45
    params                         shift and go to state 46
    empty                          shift and go to state 47

state 43

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID . RPAREN LCURLY cmd RCURLY RCURLY

    RPAREN          shift and go to state 48


state 44

    (16) params -> tipo . ID tipo_r

    ID              shift and go to state 49


state 45

    (9) metodo -> RW_PUBLIC tipo ID LPAREN params_o . RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY

    RPAREN          shift and go to state 50


state 46

    (19) params_o -> params .

    RPAREN          reduce using rule 19 (params_o -> params .)


state 47

    (20) params_o -> empty .

    RPAREN          reduce using rule 20 (params_o -> empty .)


state 48

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN . LCURLY cmd RCURLY RCURLY

    LCURLY          shift and go to state 51


state 49

    (16) params -> tipo ID . tipo_r
    (17) tipo_r -> . P_COMMA tipo ID tipo_r
    (18) tipo_r -> . empty
    (65) empty -> .

    P_COMMA         shift and go to state 53
    RPAREN          reduce using rule 65 (empty -> .)

    tipo_r                         shift and go to state 52
    empty                          shift and go to state 54

state 50

    (9) metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN . LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY

    LCURLY          shift and go to state 55


state 51

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY . cmd RCURLY RCURLY
    (25) cmd -> . LCURLY cmd_r RCURLY
    (26) cmd -> . RW_IF LPAREN exp RPAREN cmd
    (27) cmd -> . RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd
    (28) cmd -> . RW_WHILE LPAREN exp RPAREN cmd
    (29) cmd -> . RW_SOUT LPAREN exp RPAREN P_SEMICOLON
    (30) cmd -> . ID OP_ATTR exp P_SEMICOLON
    (31) cmd -> . ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON

    LCURLY          shift and go to state 57
    RW_IF           shift and go to state 59
    RW_WHILE        shift and go to state 60
    RW_SOUT         shift and go to state 61
    ID              shift and go to state 56

    cmd                            shift and go to state 58

state 52

    (16) params -> tipo ID tipo_r .

    RPAREN          reduce using rule 16 (params -> tipo ID tipo_r .)


state 53

    (17) tipo_r -> P_COMMA . tipo ID tipo_r
    (21) tipo -> . RW_INT LBRACK RBRACK
    (22) tipo -> . RW_BOOLEAN
    (23) tipo -> . RW_INT
    (24) tipo -> . ID

    RW_INT          shift and go to state 27
    RW_BOOLEAN      shift and go to state 28
    ID              shift and go to state 22

    tipo                           shift and go to state 62

state 54

    (18) tipo_r -> empty .

    RPAREN          reduce using rule 18 (tipo_r -> empty .)


state 55

    (9) metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY . var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY
    (12) var_r -> . var_r var
    (13) var_r -> . empty
    (65) empty -> .

    RW_INT          reduce using rule 65 (empty -> .)
    RW_BOOLEAN      reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)
    RW_RETURN       reduce using rule 65 (empty -> .)
    LCURLY          reduce using rule 65 (empty -> .)
    RW_IF           reduce using rule 65 (empty -> .)
    RW_WHILE        reduce using rule 65 (empty -> .)
    RW_SOUT         reduce using rule 65 (empty -> .)

    var_r                          shift and go to state 63
    empty                          shift and go to state 20

state 56

    (30) cmd -> ID . OP_ATTR exp P_SEMICOLON
    (31) cmd -> ID . LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON

    OP_ATTR         shift and go to state 64
    LBRACK          shift and go to state 65


state 57

    (25) cmd -> LCURLY . cmd_r RCURLY
    (14) cmd_r -> . cmd_r cmd
    (15) cmd_r -> . empty
    (65) empty -> .

    RCURLY          reduce using rule 65 (empty -> .)
    LCURLY          reduce using rule 65 (empty -> .)
    RW_IF           reduce using rule 65 (empty -> .)
    RW_WHILE        reduce using rule 65 (empty -> .)
    RW_SOUT         reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)

    cmd_r                          shift and go to state 66
    empty                          shift and go to state 67

state 58

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd . RCURLY RCURLY

    RCURLY          shift and go to state 68


state 59

    (26) cmd -> RW_IF . LPAREN exp RPAREN cmd
    (27) cmd -> RW_IF . LPAREN exp RPAREN cmd RW_ELSE cmd

    LPAREN          shift and go to state 69


state 60

    (28) cmd -> RW_WHILE . LPAREN exp RPAREN cmd

    LPAREN          shift and go to state 70


state 61

    (29) cmd -> RW_SOUT . LPAREN exp RPAREN P_SEMICOLON

    LPAREN          shift and go to state 71


state 62

    (17) tipo_r -> P_COMMA tipo . ID tipo_r

    ID              shift and go to state 72


state 63

    (9) metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r . cmd_r RW_RETURN exp P_SEMICOLON RCURLY
    (12) var_r -> var_r . var
    (14) cmd_r -> . cmd_r cmd
    (15) cmd_r -> . empty
    (8) var -> . tipo ID P_SEMICOLON
    (65) empty -> .
    (21) tipo -> . RW_INT LBRACK RBRACK
    (22) tipo -> . RW_BOOLEAN
    (23) tipo -> . RW_INT
    (24) tipo -> . ID

  ! shift/reduce conflict for ID resolved as shift
    RW_RETURN       reduce using rule 65 (empty -> .)
    LCURLY          reduce using rule 65 (empty -> .)
    RW_IF           reduce using rule 65 (empty -> .)
    RW_WHILE        reduce using rule 65 (empty -> .)
    RW_SOUT         reduce using rule 65 (empty -> .)
    RW_INT          shift and go to state 27
    RW_BOOLEAN      shift and go to state 28
    ID              shift and go to state 22

  ! ID              [ reduce using rule 65 (empty -> .) ]

    tipo                           shift and go to state 26
    cmd_r                          shift and go to state 73
    var                            shift and go to state 24
    empty                          shift and go to state 67

state 64

    (30) cmd -> ID OP_ATTR . exp P_SEMICOLON
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    exp                            shift and go to state 75
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 65

    (31) cmd -> ID LBRACK . exp RBRACK OP_ATTR exp P_SEMICOLON
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    exp                            shift and go to state 90
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 66

    (25) cmd -> LCURLY cmd_r . RCURLY
    (14) cmd_r -> cmd_r . cmd
    (25) cmd -> . LCURLY cmd_r RCURLY
    (26) cmd -> . RW_IF LPAREN exp RPAREN cmd
    (27) cmd -> . RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd
    (28) cmd -> . RW_WHILE LPAREN exp RPAREN cmd
    (29) cmd -> . RW_SOUT LPAREN exp RPAREN P_SEMICOLON
    (30) cmd -> . ID OP_ATTR exp P_SEMICOLON
    (31) cmd -> . ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON

    RCURLY          shift and go to state 91
    LCURLY          shift and go to state 57
    RW_IF           shift and go to state 59
    RW_WHILE        shift and go to state 60
    RW_SOUT         shift and go to state 61
    ID              shift and go to state 56

    cmd                            shift and go to state 92

state 67

    (15) cmd_r -> empty .

    RCURLY          reduce using rule 15 (cmd_r -> empty .)
    LCURLY          reduce using rule 15 (cmd_r -> empty .)
    RW_IF           reduce using rule 15 (cmd_r -> empty .)
    RW_WHILE        reduce using rule 15 (cmd_r -> empty .)
    RW_SOUT         reduce using rule 15 (cmd_r -> empty .)
    ID              reduce using rule 15 (cmd_r -> empty .)
    RW_RETURN       reduce using rule 15 (cmd_r -> empty .)


state 68

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY . RCURLY

    RCURLY          shift and go to state 93


state 69

    (26) cmd -> RW_IF LPAREN . exp RPAREN cmd
    (27) cmd -> RW_IF LPAREN . exp RPAREN cmd RW_ELSE cmd
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    exp                            shift and go to state 94
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 70

    (28) cmd -> RW_WHILE LPAREN . exp RPAREN cmd
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    exp                            shift and go to state 95
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 71

    (29) cmd -> RW_SOUT LPAREN . exp RPAREN P_SEMICOLON
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    exp                            shift and go to state 96
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 72

    (17) tipo_r -> P_COMMA tipo ID . tipo_r
    (17) tipo_r -> . P_COMMA tipo ID tipo_r
    (18) tipo_r -> . empty
    (65) empty -> .

    P_COMMA         shift and go to state 53
    RPAREN          reduce using rule 65 (empty -> .)

    tipo_r                         shift and go to state 97
    empty                          shift and go to state 54

state 73

    (9) metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r . RW_RETURN exp P_SEMICOLON RCURLY
    (14) cmd_r -> cmd_r . cmd
    (25) cmd -> . LCURLY cmd_r RCURLY
    (26) cmd -> . RW_IF LPAREN exp RPAREN cmd
    (27) cmd -> . RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd
    (28) cmd -> . RW_WHILE LPAREN exp RPAREN cmd
    (29) cmd -> . RW_SOUT LPAREN exp RPAREN P_SEMICOLON
    (30) cmd -> . ID OP_ATTR exp P_SEMICOLON
    (31) cmd -> . ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON

    RW_RETURN       shift and go to state 98
    LCURLY          shift and go to state 57
    RW_IF           shift and go to state 59
    RW_WHILE        shift and go to state 60
    RW_SOUT         shift and go to state 61
    ID              shift and go to state 56

    cmd                            shift and go to state 92

state 74

    (54) pexp -> ID .

    P_POINT         reduce using rule 54 (pexp -> ID .)
    LBRACK          reduce using rule 54 (pexp -> ID .)
    OP_MULTIPLY     reduce using rule 54 (pexp -> ID .)
    OP_DIVISION     reduce using rule 54 (pexp -> ID .)
    OP_PLUS         reduce using rule 54 (pexp -> ID .)
    OP_MINUS        reduce using rule 54 (pexp -> ID .)
    OP_LESSER       reduce using rule 54 (pexp -> ID .)
    OP_EQUAL        reduce using rule 54 (pexp -> ID .)
    OP_NOT_EQUAL    reduce using rule 54 (pexp -> ID .)
    P_SEMICOLON     reduce using rule 54 (pexp -> ID .)
    OP_AND          reduce using rule 54 (pexp -> ID .)
    RBRACK          reduce using rule 54 (pexp -> ID .)
    RPAREN          reduce using rule 54 (pexp -> ID .)
    P_COMMA         reduce using rule 54 (pexp -> ID .)


state 75

    (30) cmd -> ID OP_ATTR exp . P_SEMICOLON
    (32) exp -> exp . OP_AND rexp

    P_SEMICOLON     shift and go to state 99
    OP_AND          shift and go to state 100


state 76

    (33) exp -> rexp .
    (34) rexp -> rexp . OP_LESSER aexp
    (35) rexp -> rexp . OP_EQUAL aexp
    (36) rexp -> rexp . OP_NOT_EQUAL aexp

    P_SEMICOLON     reduce using rule 33 (exp -> rexp .)
    OP_AND          reduce using rule 33 (exp -> rexp .)
    RBRACK          reduce using rule 33 (exp -> rexp .)
    RPAREN          reduce using rule 33 (exp -> rexp .)
    P_COMMA         reduce using rule 33 (exp -> rexp .)
    OP_LESSER       shift and go to state 101
    OP_EQUAL        shift and go to state 102
    OP_NOT_EQUAL    shift and go to state 103


state 77

    (37) rexp -> aexp .
    (38) aexp -> aexp . OP_PLUS mexp
    (39) aexp -> aexp . OP_MINUS mexp

    OP_LESSER       reduce using rule 37 (rexp -> aexp .)
    OP_EQUAL        reduce using rule 37 (rexp -> aexp .)
    OP_NOT_EQUAL    reduce using rule 37 (rexp -> aexp .)
    P_SEMICOLON     reduce using rule 37 (rexp -> aexp .)
    OP_AND          reduce using rule 37 (rexp -> aexp .)
    RBRACK          reduce using rule 37 (rexp -> aexp .)
    RPAREN          reduce using rule 37 (rexp -> aexp .)
    P_COMMA         reduce using rule 37 (rexp -> aexp .)
    OP_PLUS         shift and go to state 104
    OP_MINUS        shift and go to state 105


state 78

    (40) aexp -> mexp .
    (41) mexp -> mexp . OP_MULTIPLY sexp
    (42) mexp -> mexp . OP_DIVISION sexp

    OP_PLUS         reduce using rule 40 (aexp -> mexp .)
    OP_MINUS        reduce using rule 40 (aexp -> mexp .)
    OP_LESSER       reduce using rule 40 (aexp -> mexp .)
    OP_EQUAL        reduce using rule 40 (aexp -> mexp .)
    OP_NOT_EQUAL    reduce using rule 40 (aexp -> mexp .)
    P_SEMICOLON     reduce using rule 40 (aexp -> mexp .)
    OP_AND          reduce using rule 40 (aexp -> mexp .)
    RBRACK          reduce using rule 40 (aexp -> mexp .)
    RPAREN          reduce using rule 40 (aexp -> mexp .)
    P_COMMA         reduce using rule 40 (aexp -> mexp .)
    OP_MULTIPLY     shift and go to state 106
    OP_DIVISION     shift and go to state 107


state 79

    (45) sexp -> OP_MINUS . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    sexp                           shift and go to state 108
    pexp                           shift and go to state 87

state 80

    (43) mexp -> sexp .

    OP_MULTIPLY     reduce using rule 43 (mexp -> sexp .)
    OP_DIVISION     reduce using rule 43 (mexp -> sexp .)
    OP_PLUS         reduce using rule 43 (mexp -> sexp .)
    OP_MINUS        reduce using rule 43 (mexp -> sexp .)
    OP_LESSER       reduce using rule 43 (mexp -> sexp .)
    OP_EQUAL        reduce using rule 43 (mexp -> sexp .)
    OP_NOT_EQUAL    reduce using rule 43 (mexp -> sexp .)
    P_SEMICOLON     reduce using rule 43 (mexp -> sexp .)
    OP_AND          reduce using rule 43 (mexp -> sexp .)
    RBRACK          reduce using rule 43 (mexp -> sexp .)
    RPAREN          reduce using rule 43 (mexp -> sexp .)
    P_COMMA         reduce using rule 43 (mexp -> sexp .)


state 81

    (44) sexp -> OP_NOT . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    sexp                           shift and go to state 109
    pexp                           shift and go to state 87

state 82

    (46) sexp -> RW_TRUE .

    OP_MULTIPLY     reduce using rule 46 (sexp -> RW_TRUE .)
    OP_DIVISION     reduce using rule 46 (sexp -> RW_TRUE .)
    OP_PLUS         reduce using rule 46 (sexp -> RW_TRUE .)
    OP_MINUS        reduce using rule 46 (sexp -> RW_TRUE .)
    OP_LESSER       reduce using rule 46 (sexp -> RW_TRUE .)
    OP_EQUAL        reduce using rule 46 (sexp -> RW_TRUE .)
    OP_NOT_EQUAL    reduce using rule 46 (sexp -> RW_TRUE .)
    P_SEMICOLON     reduce using rule 46 (sexp -> RW_TRUE .)
    OP_AND          reduce using rule 46 (sexp -> RW_TRUE .)
    RBRACK          reduce using rule 46 (sexp -> RW_TRUE .)
    RPAREN          reduce using rule 46 (sexp -> RW_TRUE .)
    P_COMMA         reduce using rule 46 (sexp -> RW_TRUE .)


state 83

    (47) sexp -> RW_FALSE .

    OP_MULTIPLY     reduce using rule 47 (sexp -> RW_FALSE .)
    OP_DIVISION     reduce using rule 47 (sexp -> RW_FALSE .)
    OP_PLUS         reduce using rule 47 (sexp -> RW_FALSE .)
    OP_MINUS        reduce using rule 47 (sexp -> RW_FALSE .)
    OP_LESSER       reduce using rule 47 (sexp -> RW_FALSE .)
    OP_EQUAL        reduce using rule 47 (sexp -> RW_FALSE .)
    OP_NOT_EQUAL    reduce using rule 47 (sexp -> RW_FALSE .)
    P_SEMICOLON     reduce using rule 47 (sexp -> RW_FALSE .)
    OP_AND          reduce using rule 47 (sexp -> RW_FALSE .)
    RBRACK          reduce using rule 47 (sexp -> RW_FALSE .)
    RPAREN          reduce using rule 47 (sexp -> RW_FALSE .)
    P_COMMA         reduce using rule 47 (sexp -> RW_FALSE .)


state 84

    (48) sexp -> RW_NULL .

    OP_MULTIPLY     reduce using rule 48 (sexp -> RW_NULL .)
    OP_DIVISION     reduce using rule 48 (sexp -> RW_NULL .)
    OP_PLUS         reduce using rule 48 (sexp -> RW_NULL .)
    OP_MINUS        reduce using rule 48 (sexp -> RW_NULL .)
    OP_LESSER       reduce using rule 48 (sexp -> RW_NULL .)
    OP_EQUAL        reduce using rule 48 (sexp -> RW_NULL .)
    OP_NOT_EQUAL    reduce using rule 48 (sexp -> RW_NULL .)
    P_SEMICOLON     reduce using rule 48 (sexp -> RW_NULL .)
    OP_AND          reduce using rule 48 (sexp -> RW_NULL .)
    RBRACK          reduce using rule 48 (sexp -> RW_NULL .)
    RPAREN          reduce using rule 48 (sexp -> RW_NULL .)
    P_COMMA         reduce using rule 48 (sexp -> RW_NULL .)


state 85

    (49) sexp -> NUMBER .

    OP_MULTIPLY     reduce using rule 49 (sexp -> NUMBER .)
    OP_DIVISION     reduce using rule 49 (sexp -> NUMBER .)
    OP_PLUS         reduce using rule 49 (sexp -> NUMBER .)
    OP_MINUS        reduce using rule 49 (sexp -> NUMBER .)
    OP_LESSER       reduce using rule 49 (sexp -> NUMBER .)
    OP_EQUAL        reduce using rule 49 (sexp -> NUMBER .)
    OP_NOT_EQUAL    reduce using rule 49 (sexp -> NUMBER .)
    P_SEMICOLON     reduce using rule 49 (sexp -> NUMBER .)
    OP_AND          reduce using rule 49 (sexp -> NUMBER .)
    RBRACK          reduce using rule 49 (sexp -> NUMBER .)
    RPAREN          reduce using rule 49 (sexp -> NUMBER .)
    P_COMMA         reduce using rule 49 (sexp -> NUMBER .)


state 86

    (50) sexp -> RW_NEW . RW_INT LBRACK exp RBRACK
    (56) pexp -> RW_NEW . ID LPAREN RPAREN

    RW_INT          shift and go to state 110
    ID              shift and go to state 111


state 87

    (51) sexp -> pexp . P_POINT RW_LENGTH
    (52) sexp -> pexp . LBRACK exp RBRACK
    (53) sexp -> pexp .
    (58) pexp -> pexp . P_POINT ID
    (59) pexp -> pexp . P_POINT ID LPAREN exps_o RPAREN

    P_POINT         shift and go to state 112
    LBRACK          shift and go to state 113
    OP_MULTIPLY     reduce using rule 53 (sexp -> pexp .)
    OP_DIVISION     reduce using rule 53 (sexp -> pexp .)
    OP_PLUS         reduce using rule 53 (sexp -> pexp .)
    OP_MINUS        reduce using rule 53 (sexp -> pexp .)
    OP_LESSER       reduce using rule 53 (sexp -> pexp .)
    OP_EQUAL        reduce using rule 53 (sexp -> pexp .)
    OP_NOT_EQUAL    reduce using rule 53 (sexp -> pexp .)
    P_SEMICOLON     reduce using rule 53 (sexp -> pexp .)
    OP_AND          reduce using rule 53 (sexp -> pexp .)
    RBRACK          reduce using rule 53 (sexp -> pexp .)
    RPAREN          reduce using rule 53 (sexp -> pexp .)
    P_COMMA         reduce using rule 53 (sexp -> pexp .)


state 88

    (55) pexp -> RW_THIS .

    P_POINT         reduce using rule 55 (pexp -> RW_THIS .)
    LBRACK          reduce using rule 55 (pexp -> RW_THIS .)
    OP_MULTIPLY     reduce using rule 55 (pexp -> RW_THIS .)
    OP_DIVISION     reduce using rule 55 (pexp -> RW_THIS .)
    OP_PLUS         reduce using rule 55 (pexp -> RW_THIS .)
    OP_MINUS        reduce using rule 55 (pexp -> RW_THIS .)
    OP_LESSER       reduce using rule 55 (pexp -> RW_THIS .)
    OP_EQUAL        reduce using rule 55 (pexp -> RW_THIS .)
    OP_NOT_EQUAL    reduce using rule 55 (pexp -> RW_THIS .)
    P_SEMICOLON     reduce using rule 55 (pexp -> RW_THIS .)
    OP_AND          reduce using rule 55 (pexp -> RW_THIS .)
    RBRACK          reduce using rule 55 (pexp -> RW_THIS .)
    RPAREN          reduce using rule 55 (pexp -> RW_THIS .)
    P_COMMA         reduce using rule 55 (pexp -> RW_THIS .)


state 89

    (57) pexp -> LPAREN . exp RPAREN
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    exp                            shift and go to state 114
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 90

    (31) cmd -> ID LBRACK exp . RBRACK OP_ATTR exp P_SEMICOLON
    (32) exp -> exp . OP_AND rexp

    RBRACK          shift and go to state 115
    OP_AND          shift and go to state 100


state 91

    (25) cmd -> LCURLY cmd_r RCURLY .

    RCURLY          reduce using rule 25 (cmd -> LCURLY cmd_r RCURLY .)
    LCURLY          reduce using rule 25 (cmd -> LCURLY cmd_r RCURLY .)
    RW_IF           reduce using rule 25 (cmd -> LCURLY cmd_r RCURLY .)
    RW_WHILE        reduce using rule 25 (cmd -> LCURLY cmd_r RCURLY .)
    RW_SOUT         reduce using rule 25 (cmd -> LCURLY cmd_r RCURLY .)
    ID              reduce using rule 25 (cmd -> LCURLY cmd_r RCURLY .)
    RW_RETURN       reduce using rule 25 (cmd -> LCURLY cmd_r RCURLY .)
    RW_ELSE         reduce using rule 25 (cmd -> LCURLY cmd_r RCURLY .)


state 92

    (14) cmd_r -> cmd_r cmd .

    RCURLY          reduce using rule 14 (cmd_r -> cmd_r cmd .)
    LCURLY          reduce using rule 14 (cmd_r -> cmd_r cmd .)
    RW_IF           reduce using rule 14 (cmd_r -> cmd_r cmd .)
    RW_WHILE        reduce using rule 14 (cmd_r -> cmd_r cmd .)
    RW_SOUT         reduce using rule 14 (cmd_r -> cmd_r cmd .)
    ID              reduce using rule 14 (cmd_r -> cmd_r cmd .)
    RW_RETURN       reduce using rule 14 (cmd_r -> cmd_r cmd .)


state 93

    (4) main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY .

    RW_CLASS        reduce using rule 4 (main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY .)
    $end            reduce using rule 4 (main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY .)


state 94

    (26) cmd -> RW_IF LPAREN exp . RPAREN cmd
    (27) cmd -> RW_IF LPAREN exp . RPAREN cmd RW_ELSE cmd
    (32) exp -> exp . OP_AND rexp

    RPAREN          shift and go to state 116
    OP_AND          shift and go to state 100


state 95

    (28) cmd -> RW_WHILE LPAREN exp . RPAREN cmd
    (32) exp -> exp . OP_AND rexp

    RPAREN          shift and go to state 117
    OP_AND          shift and go to state 100


state 96

    (29) cmd -> RW_SOUT LPAREN exp . RPAREN P_SEMICOLON
    (32) exp -> exp . OP_AND rexp

    RPAREN          shift and go to state 118
    OP_AND          shift and go to state 100


state 97

    (17) tipo_r -> P_COMMA tipo ID tipo_r .

    RPAREN          reduce using rule 17 (tipo_r -> P_COMMA tipo ID tipo_r .)


state 98

    (9) metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN . exp P_SEMICOLON RCURLY
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    exp                            shift and go to state 119
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 99

    (30) cmd -> ID OP_ATTR exp P_SEMICOLON .

    RCURLY          reduce using rule 30 (cmd -> ID OP_ATTR exp P_SEMICOLON .)
    LCURLY          reduce using rule 30 (cmd -> ID OP_ATTR exp P_SEMICOLON .)
    RW_IF           reduce using rule 30 (cmd -> ID OP_ATTR exp P_SEMICOLON .)
    RW_WHILE        reduce using rule 30 (cmd -> ID OP_ATTR exp P_SEMICOLON .)
    RW_SOUT         reduce using rule 30 (cmd -> ID OP_ATTR exp P_SEMICOLON .)
    ID              reduce using rule 30 (cmd -> ID OP_ATTR exp P_SEMICOLON .)
    RW_RETURN       reduce using rule 30 (cmd -> ID OP_ATTR exp P_SEMICOLON .)
    RW_ELSE         reduce using rule 30 (cmd -> ID OP_ATTR exp P_SEMICOLON .)


state 100

    (32) exp -> exp OP_AND . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    rexp                           shift and go to state 120
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 101

    (34) rexp -> rexp OP_LESSER . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    aexp                           shift and go to state 121
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 102

    (35) rexp -> rexp OP_EQUAL . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    aexp                           shift and go to state 122
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 103

    (36) rexp -> rexp OP_NOT_EQUAL . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    aexp                           shift and go to state 123
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 104

    (38) aexp -> aexp OP_PLUS . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    mexp                           shift and go to state 124
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 105

    (39) aexp -> aexp OP_MINUS . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    mexp                           shift and go to state 125
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 106

    (41) mexp -> mexp OP_MULTIPLY . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    sexp                           shift and go to state 126
    pexp                           shift and go to state 87

state 107

    (42) mexp -> mexp OP_DIVISION . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    sexp                           shift and go to state 127
    pexp                           shift and go to state 87

state 108

    (45) sexp -> OP_MINUS sexp .

    OP_MULTIPLY     reduce using rule 45 (sexp -> OP_MINUS sexp .)
    OP_DIVISION     reduce using rule 45 (sexp -> OP_MINUS sexp .)
    OP_PLUS         reduce using rule 45 (sexp -> OP_MINUS sexp .)
    OP_MINUS        reduce using rule 45 (sexp -> OP_MINUS sexp .)
    OP_LESSER       reduce using rule 45 (sexp -> OP_MINUS sexp .)
    OP_EQUAL        reduce using rule 45 (sexp -> OP_MINUS sexp .)
    OP_NOT_EQUAL    reduce using rule 45 (sexp -> OP_MINUS sexp .)
    P_SEMICOLON     reduce using rule 45 (sexp -> OP_MINUS sexp .)
    OP_AND          reduce using rule 45 (sexp -> OP_MINUS sexp .)
    RBRACK          reduce using rule 45 (sexp -> OP_MINUS sexp .)
    RPAREN          reduce using rule 45 (sexp -> OP_MINUS sexp .)
    P_COMMA         reduce using rule 45 (sexp -> OP_MINUS sexp .)


state 109

    (44) sexp -> OP_NOT sexp .

    OP_MULTIPLY     reduce using rule 44 (sexp -> OP_NOT sexp .)
    OP_DIVISION     reduce using rule 44 (sexp -> OP_NOT sexp .)
    OP_PLUS         reduce using rule 44 (sexp -> OP_NOT sexp .)
    OP_MINUS        reduce using rule 44 (sexp -> OP_NOT sexp .)
    OP_LESSER       reduce using rule 44 (sexp -> OP_NOT sexp .)
    OP_EQUAL        reduce using rule 44 (sexp -> OP_NOT sexp .)
    OP_NOT_EQUAL    reduce using rule 44 (sexp -> OP_NOT sexp .)
    P_SEMICOLON     reduce using rule 44 (sexp -> OP_NOT sexp .)
    OP_AND          reduce using rule 44 (sexp -> OP_NOT sexp .)
    RBRACK          reduce using rule 44 (sexp -> OP_NOT sexp .)
    RPAREN          reduce using rule 44 (sexp -> OP_NOT sexp .)
    P_COMMA         reduce using rule 44 (sexp -> OP_NOT sexp .)


state 110

    (50) sexp -> RW_NEW RW_INT . LBRACK exp RBRACK

    LBRACK          shift and go to state 128


state 111

    (56) pexp -> RW_NEW ID . LPAREN RPAREN

    LPAREN          shift and go to state 129


state 112

    (51) sexp -> pexp P_POINT . RW_LENGTH
    (58) pexp -> pexp P_POINT . ID
    (59) pexp -> pexp P_POINT . ID LPAREN exps_o RPAREN

    RW_LENGTH       shift and go to state 130
    ID              shift and go to state 131


state 113

    (52) sexp -> pexp LBRACK . exp RBRACK
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    pexp                           shift and go to state 87
    exp                            shift and go to state 132
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80

state 114

    (57) pexp -> LPAREN exp . RPAREN
    (32) exp -> exp . OP_AND rexp

    RPAREN          shift and go to state 133
    OP_AND          shift and go to state 100


state 115

    (31) cmd -> ID LBRACK exp RBRACK . OP_ATTR exp P_SEMICOLON

    OP_ATTR         shift and go to state 134


state 116

    (26) cmd -> RW_IF LPAREN exp RPAREN . cmd
    (27) cmd -> RW_IF LPAREN exp RPAREN . cmd RW_ELSE cmd
    (25) cmd -> . LCURLY cmd_r RCURLY
    (26) cmd -> . RW_IF LPAREN exp RPAREN cmd
    (27) cmd -> . RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd
    (28) cmd -> . RW_WHILE LPAREN exp RPAREN cmd
    (29) cmd -> . RW_SOUT LPAREN exp RPAREN P_SEMICOLON
    (30) cmd -> . ID OP_ATTR exp P_SEMICOLON
    (31) cmd -> . ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON

    LCURLY          shift and go to state 57
    RW_IF           shift and go to state 59
    RW_WHILE        shift and go to state 60
    RW_SOUT         shift and go to state 61
    ID              shift and go to state 56

    cmd                            shift and go to state 135

state 117

    (28) cmd -> RW_WHILE LPAREN exp RPAREN . cmd
    (25) cmd -> . LCURLY cmd_r RCURLY
    (26) cmd -> . RW_IF LPAREN exp RPAREN cmd
    (27) cmd -> . RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd
    (28) cmd -> . RW_WHILE LPAREN exp RPAREN cmd
    (29) cmd -> . RW_SOUT LPAREN exp RPAREN P_SEMICOLON
    (30) cmd -> . ID OP_ATTR exp P_SEMICOLON
    (31) cmd -> . ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON

    LCURLY          shift and go to state 57
    RW_IF           shift and go to state 59
    RW_WHILE        shift and go to state 60
    RW_SOUT         shift and go to state 61
    ID              shift and go to state 56

    cmd                            shift and go to state 136

state 118

    (29) cmd -> RW_SOUT LPAREN exp RPAREN . P_SEMICOLON

    P_SEMICOLON     shift and go to state 137


state 119

    (9) metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp . P_SEMICOLON RCURLY
    (32) exp -> exp . OP_AND rexp

    P_SEMICOLON     shift and go to state 138
    OP_AND          shift and go to state 100


state 120

    (32) exp -> exp OP_AND rexp .
    (34) rexp -> rexp . OP_LESSER aexp
    (35) rexp -> rexp . OP_EQUAL aexp
    (36) rexp -> rexp . OP_NOT_EQUAL aexp

    P_SEMICOLON     reduce using rule 32 (exp -> exp OP_AND rexp .)
    OP_AND          reduce using rule 32 (exp -> exp OP_AND rexp .)
    RBRACK          reduce using rule 32 (exp -> exp OP_AND rexp .)
    RPAREN          reduce using rule 32 (exp -> exp OP_AND rexp .)
    P_COMMA         reduce using rule 32 (exp -> exp OP_AND rexp .)
    OP_LESSER       shift and go to state 101
    OP_EQUAL        shift and go to state 102
    OP_NOT_EQUAL    shift and go to state 103


state 121

    (34) rexp -> rexp OP_LESSER aexp .
    (38) aexp -> aexp . OP_PLUS mexp
    (39) aexp -> aexp . OP_MINUS mexp

    OP_LESSER       reduce using rule 34 (rexp -> rexp OP_LESSER aexp .)
    OP_EQUAL        reduce using rule 34 (rexp -> rexp OP_LESSER aexp .)
    OP_NOT_EQUAL    reduce using rule 34 (rexp -> rexp OP_LESSER aexp .)
    P_SEMICOLON     reduce using rule 34 (rexp -> rexp OP_LESSER aexp .)
    OP_AND          reduce using rule 34 (rexp -> rexp OP_LESSER aexp .)
    RBRACK          reduce using rule 34 (rexp -> rexp OP_LESSER aexp .)
    RPAREN          reduce using rule 34 (rexp -> rexp OP_LESSER aexp .)
    P_COMMA         reduce using rule 34 (rexp -> rexp OP_LESSER aexp .)
    OP_PLUS         shift and go to state 104
    OP_MINUS        shift and go to state 105


state 122

    (35) rexp -> rexp OP_EQUAL aexp .
    (38) aexp -> aexp . OP_PLUS mexp
    (39) aexp -> aexp . OP_MINUS mexp

    OP_LESSER       reduce using rule 35 (rexp -> rexp OP_EQUAL aexp .)
    OP_EQUAL        reduce using rule 35 (rexp -> rexp OP_EQUAL aexp .)
    OP_NOT_EQUAL    reduce using rule 35 (rexp -> rexp OP_EQUAL aexp .)
    P_SEMICOLON     reduce using rule 35 (rexp -> rexp OP_EQUAL aexp .)
    OP_AND          reduce using rule 35 (rexp -> rexp OP_EQUAL aexp .)
    RBRACK          reduce using rule 35 (rexp -> rexp OP_EQUAL aexp .)
    RPAREN          reduce using rule 35 (rexp -> rexp OP_EQUAL aexp .)
    P_COMMA         reduce using rule 35 (rexp -> rexp OP_EQUAL aexp .)
    OP_PLUS         shift and go to state 104
    OP_MINUS        shift and go to state 105


state 123

    (36) rexp -> rexp OP_NOT_EQUAL aexp .
    (38) aexp -> aexp . OP_PLUS mexp
    (39) aexp -> aexp . OP_MINUS mexp

    OP_LESSER       reduce using rule 36 (rexp -> rexp OP_NOT_EQUAL aexp .)
    OP_EQUAL        reduce using rule 36 (rexp -> rexp OP_NOT_EQUAL aexp .)
    OP_NOT_EQUAL    reduce using rule 36 (rexp -> rexp OP_NOT_EQUAL aexp .)
    P_SEMICOLON     reduce using rule 36 (rexp -> rexp OP_NOT_EQUAL aexp .)
    OP_AND          reduce using rule 36 (rexp -> rexp OP_NOT_EQUAL aexp .)
    RBRACK          reduce using rule 36 (rexp -> rexp OP_NOT_EQUAL aexp .)
    RPAREN          reduce using rule 36 (rexp -> rexp OP_NOT_EQUAL aexp .)
    P_COMMA         reduce using rule 36 (rexp -> rexp OP_NOT_EQUAL aexp .)
    OP_PLUS         shift and go to state 104
    OP_MINUS        shift and go to state 105


state 124

    (38) aexp -> aexp OP_PLUS mexp .
    (41) mexp -> mexp . OP_MULTIPLY sexp
    (42) mexp -> mexp . OP_DIVISION sexp

    OP_PLUS         reduce using rule 38 (aexp -> aexp OP_PLUS mexp .)
    OP_MINUS        reduce using rule 38 (aexp -> aexp OP_PLUS mexp .)
    OP_LESSER       reduce using rule 38 (aexp -> aexp OP_PLUS mexp .)
    OP_EQUAL        reduce using rule 38 (aexp -> aexp OP_PLUS mexp .)
    OP_NOT_EQUAL    reduce using rule 38 (aexp -> aexp OP_PLUS mexp .)
    P_SEMICOLON     reduce using rule 38 (aexp -> aexp OP_PLUS mexp .)
    OP_AND          reduce using rule 38 (aexp -> aexp OP_PLUS mexp .)
    RBRACK          reduce using rule 38 (aexp -> aexp OP_PLUS mexp .)
    RPAREN          reduce using rule 38 (aexp -> aexp OP_PLUS mexp .)
    P_COMMA         reduce using rule 38 (aexp -> aexp OP_PLUS mexp .)
    OP_MULTIPLY     shift and go to state 106
    OP_DIVISION     shift and go to state 107


state 125

    (39) aexp -> aexp OP_MINUS mexp .
    (41) mexp -> mexp . OP_MULTIPLY sexp
    (42) mexp -> mexp . OP_DIVISION sexp

    OP_PLUS         reduce using rule 39 (aexp -> aexp OP_MINUS mexp .)
    OP_MINUS        reduce using rule 39 (aexp -> aexp OP_MINUS mexp .)
    OP_LESSER       reduce using rule 39 (aexp -> aexp OP_MINUS mexp .)
    OP_EQUAL        reduce using rule 39 (aexp -> aexp OP_MINUS mexp .)
    OP_NOT_EQUAL    reduce using rule 39 (aexp -> aexp OP_MINUS mexp .)
    P_SEMICOLON     reduce using rule 39 (aexp -> aexp OP_MINUS mexp .)
    OP_AND          reduce using rule 39 (aexp -> aexp OP_MINUS mexp .)
    RBRACK          reduce using rule 39 (aexp -> aexp OP_MINUS mexp .)
    RPAREN          reduce using rule 39 (aexp -> aexp OP_MINUS mexp .)
    P_COMMA         reduce using rule 39 (aexp -> aexp OP_MINUS mexp .)
    OP_MULTIPLY     shift and go to state 106
    OP_DIVISION     shift and go to state 107


state 126

    (41) mexp -> mexp OP_MULTIPLY sexp .

    OP_MULTIPLY     reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)
    OP_DIVISION     reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)
    OP_PLUS         reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)
    OP_MINUS        reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)
    OP_LESSER       reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)
    OP_EQUAL        reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)
    OP_NOT_EQUAL    reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)
    P_SEMICOLON     reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)
    OP_AND          reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)
    RBRACK          reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)
    RPAREN          reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)
    P_COMMA         reduce using rule 41 (mexp -> mexp OP_MULTIPLY sexp .)


state 127

    (42) mexp -> mexp OP_DIVISION sexp .

    OP_MULTIPLY     reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)
    OP_DIVISION     reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)
    OP_PLUS         reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)
    OP_MINUS        reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)
    OP_LESSER       reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)
    OP_EQUAL        reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)
    OP_NOT_EQUAL    reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)
    P_SEMICOLON     reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)
    OP_AND          reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)
    RBRACK          reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)
    RPAREN          reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)
    P_COMMA         reduce using rule 42 (mexp -> mexp OP_DIVISION sexp .)


state 128

    (50) sexp -> RW_NEW RW_INT LBRACK . exp RBRACK
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    exp                            shift and go to state 139
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 129

    (56) pexp -> RW_NEW ID LPAREN . RPAREN

    RPAREN          shift and go to state 140


state 130

    (51) sexp -> pexp P_POINT RW_LENGTH .

    OP_MULTIPLY     reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)
    OP_DIVISION     reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)
    OP_PLUS         reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)
    OP_MINUS        reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)
    OP_LESSER       reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)
    OP_EQUAL        reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)
    OP_NOT_EQUAL    reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)
    P_SEMICOLON     reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)
    OP_AND          reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)
    RBRACK          reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)
    RPAREN          reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)
    P_COMMA         reduce using rule 51 (sexp -> pexp P_POINT RW_LENGTH .)


state 131

    (58) pexp -> pexp P_POINT ID .
    (59) pexp -> pexp P_POINT ID . LPAREN exps_o RPAREN

    P_POINT         reduce using rule 58 (pexp -> pexp P_POINT ID .)
    LBRACK          reduce using rule 58 (pexp -> pexp P_POINT ID .)
    OP_MULTIPLY     reduce using rule 58 (pexp -> pexp P_POINT ID .)
    OP_DIVISION     reduce using rule 58 (pexp -> pexp P_POINT ID .)
    OP_PLUS         reduce using rule 58 (pexp -> pexp P_POINT ID .)
    OP_MINUS        reduce using rule 58 (pexp -> pexp P_POINT ID .)
    OP_LESSER       reduce using rule 58 (pexp -> pexp P_POINT ID .)
    OP_EQUAL        reduce using rule 58 (pexp -> pexp P_POINT ID .)
    OP_NOT_EQUAL    reduce using rule 58 (pexp -> pexp P_POINT ID .)
    P_SEMICOLON     reduce using rule 58 (pexp -> pexp P_POINT ID .)
    OP_AND          reduce using rule 58 (pexp -> pexp P_POINT ID .)
    RBRACK          reduce using rule 58 (pexp -> pexp P_POINT ID .)
    RPAREN          reduce using rule 58 (pexp -> pexp P_POINT ID .)
    P_COMMA         reduce using rule 58 (pexp -> pexp P_POINT ID .)
    LPAREN          shift and go to state 141


state 132

    (52) sexp -> pexp LBRACK exp . RBRACK
    (32) exp -> exp . OP_AND rexp

    RBRACK          shift and go to state 142
    OP_AND          shift and go to state 100


state 133

    (57) pexp -> LPAREN exp RPAREN .

    P_POINT         reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    LBRACK          reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    OP_MULTIPLY     reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    OP_DIVISION     reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    OP_PLUS         reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    OP_MINUS        reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    OP_LESSER       reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    OP_EQUAL        reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    OP_NOT_EQUAL    reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    P_SEMICOLON     reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    OP_AND          reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    RBRACK          reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 57 (pexp -> LPAREN exp RPAREN .)
    P_COMMA         reduce using rule 57 (pexp -> LPAREN exp RPAREN .)


state 134

    (31) cmd -> ID LBRACK exp RBRACK OP_ATTR . exp P_SEMICOLON
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    exp                            shift and go to state 143
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 135

    (26) cmd -> RW_IF LPAREN exp RPAREN cmd .
    (27) cmd -> RW_IF LPAREN exp RPAREN cmd . RW_ELSE cmd

  ! shift/reduce conflict for RW_ELSE resolved as shift
    RCURLY          reduce using rule 26 (cmd -> RW_IF LPAREN exp RPAREN cmd .)
    LCURLY          reduce using rule 26 (cmd -> RW_IF LPAREN exp RPAREN cmd .)
    RW_IF           reduce using rule 26 (cmd -> RW_IF LPAREN exp RPAREN cmd .)
    RW_WHILE        reduce using rule 26 (cmd -> RW_IF LPAREN exp RPAREN cmd .)
    RW_SOUT         reduce using rule 26 (cmd -> RW_IF LPAREN exp RPAREN cmd .)
    ID              reduce using rule 26 (cmd -> RW_IF LPAREN exp RPAREN cmd .)
    RW_RETURN       reduce using rule 26 (cmd -> RW_IF LPAREN exp RPAREN cmd .)
    RW_ELSE         shift and go to state 144

  ! RW_ELSE         [ reduce using rule 26 (cmd -> RW_IF LPAREN exp RPAREN cmd .) ]


state 136

    (28) cmd -> RW_WHILE LPAREN exp RPAREN cmd .

    RCURLY          reduce using rule 28 (cmd -> RW_WHILE LPAREN exp RPAREN cmd .)
    LCURLY          reduce using rule 28 (cmd -> RW_WHILE LPAREN exp RPAREN cmd .)
    RW_IF           reduce using rule 28 (cmd -> RW_WHILE LPAREN exp RPAREN cmd .)
    RW_WHILE        reduce using rule 28 (cmd -> RW_WHILE LPAREN exp RPAREN cmd .)
    RW_SOUT         reduce using rule 28 (cmd -> RW_WHILE LPAREN exp RPAREN cmd .)
    ID              reduce using rule 28 (cmd -> RW_WHILE LPAREN exp RPAREN cmd .)
    RW_RETURN       reduce using rule 28 (cmd -> RW_WHILE LPAREN exp RPAREN cmd .)
    RW_ELSE         reduce using rule 28 (cmd -> RW_WHILE LPAREN exp RPAREN cmd .)


state 137

    (29) cmd -> RW_SOUT LPAREN exp RPAREN P_SEMICOLON .

    RCURLY          reduce using rule 29 (cmd -> RW_SOUT LPAREN exp RPAREN P_SEMICOLON .)
    LCURLY          reduce using rule 29 (cmd -> RW_SOUT LPAREN exp RPAREN P_SEMICOLON .)
    RW_IF           reduce using rule 29 (cmd -> RW_SOUT LPAREN exp RPAREN P_SEMICOLON .)
    RW_WHILE        reduce using rule 29 (cmd -> RW_SOUT LPAREN exp RPAREN P_SEMICOLON .)
    RW_SOUT         reduce using rule 29 (cmd -> RW_SOUT LPAREN exp RPAREN P_SEMICOLON .)
    ID              reduce using rule 29 (cmd -> RW_SOUT LPAREN exp RPAREN P_SEMICOLON .)
    RW_RETURN       reduce using rule 29 (cmd -> RW_SOUT LPAREN exp RPAREN P_SEMICOLON .)
    RW_ELSE         reduce using rule 29 (cmd -> RW_SOUT LPAREN exp RPAREN P_SEMICOLON .)


state 138

    (9) metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON . RCURLY

    RCURLY          shift and go to state 145


state 139

    (50) sexp -> RW_NEW RW_INT LBRACK exp . RBRACK
    (32) exp -> exp . OP_AND rexp

    RBRACK          shift and go to state 146
    OP_AND          shift and go to state 100


state 140

    (56) pexp -> RW_NEW ID LPAREN RPAREN .

    P_POINT         reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    LBRACK          reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    OP_MULTIPLY     reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    OP_DIVISION     reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    OP_PLUS         reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    OP_MINUS        reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    OP_LESSER       reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    OP_EQUAL        reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    OP_NOT_EQUAL    reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    P_SEMICOLON     reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    OP_AND          reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    RBRACK          reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    RPAREN          reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)
    P_COMMA         reduce using rule 56 (pexp -> RW_NEW ID LPAREN RPAREN .)


state 141

    (59) pexp -> pexp P_POINT ID LPAREN . exps_o RPAREN
    (60) exps_o -> . exps
    (61) exps_o -> . empty
    (62) exps -> . exp exp_r
    (65) empty -> .
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    RPAREN          reduce using rule 65 (empty -> .)
    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    pexp                           shift and go to state 87
    exps_o                         shift and go to state 147
    exps                           shift and go to state 148
    empty                          shift and go to state 149
    exp                            shift and go to state 150
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80

state 142

    (52) sexp -> pexp LBRACK exp RBRACK .

    OP_MULTIPLY     reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)
    OP_DIVISION     reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)
    OP_PLUS         reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)
    OP_MINUS        reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)
    OP_LESSER       reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)
    OP_EQUAL        reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)
    OP_NOT_EQUAL    reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)
    P_SEMICOLON     reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)
    OP_AND          reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)
    RBRACK          reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)
    RPAREN          reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)
    P_COMMA         reduce using rule 52 (sexp -> pexp LBRACK exp RBRACK .)


state 143

    (31) cmd -> ID LBRACK exp RBRACK OP_ATTR exp . P_SEMICOLON
    (32) exp -> exp . OP_AND rexp

    P_SEMICOLON     shift and go to state 151
    OP_AND          shift and go to state 100


state 144

    (27) cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE . cmd
    (25) cmd -> . LCURLY cmd_r RCURLY
    (26) cmd -> . RW_IF LPAREN exp RPAREN cmd
    (27) cmd -> . RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd
    (28) cmd -> . RW_WHILE LPAREN exp RPAREN cmd
    (29) cmd -> . RW_SOUT LPAREN exp RPAREN P_SEMICOLON
    (30) cmd -> . ID OP_ATTR exp P_SEMICOLON
    (31) cmd -> . ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON

    LCURLY          shift and go to state 57
    RW_IF           shift and go to state 59
    RW_WHILE        shift and go to state 60
    RW_SOUT         shift and go to state 61
    ID              shift and go to state 56

    cmd                            shift and go to state 152

state 145

    (9) metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY .

    RCURLY          reduce using rule 9 (metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY .)
    RW_PUBLIC       reduce using rule 9 (metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY .)


state 146

    (50) sexp -> RW_NEW RW_INT LBRACK exp RBRACK .

    OP_MULTIPLY     reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)
    OP_DIVISION     reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)
    OP_PLUS         reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)
    OP_MINUS        reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)
    OP_LESSER       reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)
    OP_EQUAL        reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)
    OP_NOT_EQUAL    reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)
    P_SEMICOLON     reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)
    OP_AND          reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)
    RBRACK          reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)
    RPAREN          reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)
    P_COMMA         reduce using rule 50 (sexp -> RW_NEW RW_INT LBRACK exp RBRACK .)


state 147

    (59) pexp -> pexp P_POINT ID LPAREN exps_o . RPAREN

    RPAREN          shift and go to state 153


state 148

    (60) exps_o -> exps .

    RPAREN          reduce using rule 60 (exps_o -> exps .)


state 149

    (61) exps_o -> empty .

    RPAREN          reduce using rule 61 (exps_o -> empty .)


state 150

    (62) exps -> exp . exp_r
    (32) exp -> exp . OP_AND rexp
    (63) exp_r -> . exp_r P_COMMA exp
    (64) exp_r -> . empty
    (65) empty -> .

    OP_AND          shift and go to state 100
    P_COMMA         reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)

    exp_r                          shift and go to state 154
    empty                          shift and go to state 155

state 151

    (31) cmd -> ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON .

    RCURLY          reduce using rule 31 (cmd -> ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON .)
    LCURLY          reduce using rule 31 (cmd -> ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON .)
    RW_IF           reduce using rule 31 (cmd -> ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON .)
    RW_WHILE        reduce using rule 31 (cmd -> ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON .)
    RW_SOUT         reduce using rule 31 (cmd -> ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON .)
    ID              reduce using rule 31 (cmd -> ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON .)
    RW_RETURN       reduce using rule 31 (cmd -> ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON .)
    RW_ELSE         reduce using rule 31 (cmd -> ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON .)


state 152

    (27) cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd .

    RCURLY          reduce using rule 27 (cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd .)
    LCURLY          reduce using rule 27 (cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd .)
    RW_IF           reduce using rule 27 (cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd .)
    RW_WHILE        reduce using rule 27 (cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd .)
    RW_SOUT         reduce using rule 27 (cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd .)
    ID              reduce using rule 27 (cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd .)
    RW_RETURN       reduce using rule 27 (cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd .)
    RW_ELSE         reduce using rule 27 (cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd .)


state 153

    (59) pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .

    P_POINT         reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    LBRACK          reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    OP_MULTIPLY     reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    OP_DIVISION     reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    OP_PLUS         reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    OP_MINUS        reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    OP_LESSER       reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    OP_EQUAL        reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    OP_NOT_EQUAL    reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    P_SEMICOLON     reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    OP_AND          reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    RBRACK          reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    RPAREN          reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)
    P_COMMA         reduce using rule 59 (pexp -> pexp P_POINT ID LPAREN exps_o RPAREN .)


state 154

    (62) exps -> exp exp_r .
    (63) exp_r -> exp_r . P_COMMA exp

    RPAREN          reduce using rule 62 (exps -> exp exp_r .)
    P_COMMA         shift and go to state 156


state 155

    (64) exp_r -> empty .

    P_COMMA         reduce using rule 64 (exp_r -> empty .)
    RPAREN          reduce using rule 64 (exp_r -> empty .)


state 156

    (63) exp_r -> exp_r P_COMMA . exp
    (32) exp -> . exp OP_AND rexp
    (33) exp -> . rexp
    (34) rexp -> . rexp OP_LESSER aexp
    (35) rexp -> . rexp OP_EQUAL aexp
    (36) rexp -> . rexp OP_NOT_EQUAL aexp
    (37) rexp -> . aexp
    (38) aexp -> . aexp OP_PLUS mexp
    (39) aexp -> . aexp OP_MINUS mexp
    (40) aexp -> . mexp
    (41) mexp -> . mexp OP_MULTIPLY sexp
    (42) mexp -> . mexp OP_DIVISION sexp
    (43) mexp -> . sexp
    (44) sexp -> . OP_NOT sexp
    (45) sexp -> . OP_MINUS sexp
    (46) sexp -> . RW_TRUE
    (47) sexp -> . RW_FALSE
    (48) sexp -> . RW_NULL
    (49) sexp -> . NUMBER
    (50) sexp -> . RW_NEW RW_INT LBRACK exp RBRACK
    (51) sexp -> . pexp P_POINT RW_LENGTH
    (52) sexp -> . pexp LBRACK exp RBRACK
    (53) sexp -> . pexp
    (54) pexp -> . ID
    (55) pexp -> . RW_THIS
    (56) pexp -> . RW_NEW ID LPAREN RPAREN
    (57) pexp -> . LPAREN exp RPAREN
    (58) pexp -> . pexp P_POINT ID
    (59) pexp -> . pexp P_POINT ID LPAREN exps_o RPAREN

    OP_NOT          shift and go to state 81
    OP_MINUS        shift and go to state 79
    RW_TRUE         shift and go to state 82
    RW_FALSE        shift and go to state 83
    RW_NULL         shift and go to state 84
    NUMBER          shift and go to state 85
    RW_NEW          shift and go to state 86
    ID              shift and go to state 74
    RW_THIS         shift and go to state 88
    LPAREN          shift and go to state 89

    exp                            shift and go to state 157
    rexp                           shift and go to state 76
    aexp                           shift and go to state 77
    mexp                           shift and go to state 78
    sexp                           shift and go to state 80
    pexp                           shift and go to state 87

state 157

    (63) exp_r -> exp_r P_COMMA exp .
    (32) exp -> exp . OP_AND rexp

    P_COMMA         reduce using rule 63 (exp_r -> exp_r P_COMMA exp .)
    RPAREN          reduce using rule 63 (exp_r -> exp_r P_COMMA exp .)
    OP_AND          shift and go to state 100

WARNING:
WARNING: Conflicts:
WARNING:
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for RW_ELSE in state 135 resolved as shift
