
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMENT ID LBRACK LCURLY LPAREN NUMBER OP_AND OP_ATTR OP_DIVISION OP_EQUAL OP_GREATER OP_GREATER_EQ OP_LESSER OP_LESSER_EQ OP_MINUS OP_MULTIPLY OP_NOT OP_NOT_EQUAL OP_PLUS P_COMMA P_POINT P_SEMICOLON RBRACK RCURLY RPAREN RW_BOOLEAN RW_CLASS RW_ELSE RW_EXTENDS RW_FALSE RW_IF RW_INT RW_LENGTH RW_MAIN RW_NEW RW_NULL RW_PUBLIC RW_RETURN RW_SOUT RW_STATIC RW_STRING RW_THIS RW_TRUE RW_VOID RW_WHILE WHITESPACEprog : main classe_rclasse_r : classe_r classe\n                | emptymain : RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLYclasse : RW_CLASS ID extends_o LCURLY var_r metodo_r RCURLYextends_o    : RW_EXTENDS ID\n                    | emptyvar : tipo ID P_SEMICOLONmetodo : RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLYmetodo_r : metodo_r metodo\n                | emptyvar_r    : var_r var\n                | empty cmd_r    : cmd_r cmd\n                | emptyparams : tipo ID tipo_rtipo_r   : P_COMMA tipo ID tipo_r\n                | emptyparams_o : params\n                | emptytipo : RW_INT LBRACK RBRACK\n            | RW_BOOLEAN\n            | RW_INT\n            | IDcmd  : LCURLY cmd_r RCURLY\n            | RW_IF LPAREN exp RPAREN cmd\n            | RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd\n            | RW_WHILE LPAREN exp RPAREN cmd\n            | RW_SOUT LPAREN exp RPAREN P_SEMICOLON\n            | ID OP_ATTR exp P_SEMICOLON\n            | ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLONexp  : exp OP_AND rexp\n            | rexprexp : rexp OP_LESSER aexp\n            | rexp OP_EQUAL aexp\n            | rexp OP_NOT_EQUAL aexp\n            | aexp aexp : aexp OP_PLUS mexp\n            | aexp OP_MINUS mexp\n            | mexpmexp : mexp OP_MULTIPLY sexp\n            | mexp OP_DIVISION sexp\n            | sexpsexp : OP_NOT sexp\n            | OP_MINUS sexp\n            | RW_TRUE\n            | RW_FALSE\n            | RW_NULL\n            | NUMBER\n            | RW_NEW RW_INT LBRACK exp RBRACK\n            | pexp P_POINT RW_LENGTH\n            | pexp LBRACK exp RBRACK\n            | pexppexp : ID\n            | RW_THIS\n            | RW_NEW ID LPAREN RPAREN\n            | LPAREN exp RPAREN\n            | pexp P_POINT ID\n            | pexp P_POINT ID LPAREN exps_o RPARENexps_o : exps\n            | emptyexps : exp exp_rexp_r : exp_r P_COMMA exp\n             | emptyempty :'
    
_lr_action_items = {'RW_CLASS':([0,2,4,5,7,30,93,],[3,-65,8,-3,-2,-5,-4,]),'$end':([1,2,4,5,7,30,93,],[0,-65,-1,-3,-2,-5,-4,]),'ID':([3,8,13,16,19,20,22,24,26,27,28,32,36,37,38,41,42,44,51,53,55,57,62,63,64,65,66,67,69,70,71,73,79,81,86,89,91,92,98,99,100,101,102,103,104,105,106,107,112,113,116,117,128,134,135,136,137,141,144,151,152,156,],[6,10,17,-65,22,-13,-24,-12,33,-23,-22,22,40,-8,-21,43,22,49,56,22,-65,-65,72,22,74,74,56,-15,74,74,74,56,74,74,111,74,-25,-14,74,-30,74,74,74,74,74,74,74,74,131,74,56,56,74,74,-26,-28,-29,74,56,-31,-27,74,]),'LCURLY':([6,10,12,14,17,20,24,37,48,50,51,55,57,63,66,67,73,91,92,99,116,117,135,136,137,144,151,152,],[9,-65,16,-7,-6,-13,-12,-8,51,55,57,-65,-65,-65,57,-15,57,-25,-14,-30,57,57,-26,-28,-29,57,-31,-27,]),'RW_PUBLIC':([9,16,19,20,23,24,25,31,37,145,],[11,-65,-65,-13,32,-12,-11,-10,-8,-9,]),'RW_EXTENDS':([10,],[13,]),'RW_STATIC':([11,],[15,]),'RW_VOID':([15,],[18,]),'RW_INT':([16,19,20,24,32,37,42,53,55,63,86,],[-65,27,-13,-12,27,-8,27,27,-65,27,110,]),'RW_BOOLEAN':([16,19,20,24,32,37,42,53,55,63,],[-65,28,-13,-12,28,-8,28,28,-65,28,]),'RCURLY':([16,19,20,23,24,25,31,37,57,58,66,67,68,91,92,99,135,136,137,138,145,151,152,],[-65,-65,-13,30,-12,-11,-10,-8,-65,68,91,-15,93,-25,-14,-30,-26,-28,-29,145,-9,-31,-27,]),'RW_MAIN':([18,],[21,]),'RW_RETURN':([20,24,37,55,63,67,73,91,92,99,135,136,137,151,152,],[-13,-12,-8,-65,-65,-15,98,-25,-14,-30,-26,-28,-29,-31,-27,]),'RW_IF':([20,24,37,51,55,57,63,66,67,73,91,92,99,116,117,135,136,137,144,151,152,],[-13,-12,-8,59,-65,-65,-65,59,-15,59,-25,-14,-30,59,59,-26,-28,-29,59,-31,-27,]),'RW_WHILE':([20,24,37,51,55,57,63,66,67,73,91,92,99,116,117,135,136,137,144,151,152,],[-13,-12,-8,60,-65,-65,-65,60,-15,60,-25,-14,-30,60,60,-26,-28,-29,60,-31,-27,]),'RW_SOUT':([20,24,37,51,55,57,63,66,67,73,91,92,99,116,117,135,136,137,144,151,152,],[-13,-12,-8,61,-65,-65,-65,61,-15,61,-25,-14,-30,61,61,-26,-28,-29,61,-31,-27,]),'LPAREN':([21,40,59,60,61,64,65,69,70,71,79,81,89,98,100,101,102,103,104,105,106,107,111,113,128,131,134,141,156,],[29,42,69,70,71,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,129,89,89,141,89,89,89,]),'LBRACK':([27,35,56,74,87,88,110,131,133,140,153,],[34,39,65,-54,113,-55,128,-58,-57,-56,-59,]),'RW_STRING':([29,],[35,]),'P_SEMICOLON':([33,74,75,76,77,78,80,82,83,84,85,87,88,108,109,118,119,120,121,122,123,124,125,126,127,130,131,133,140,142,143,146,153,],[37,-54,99,-33,-37,-40,-43,-46,-47,-48,-49,-53,-55,-45,-44,137,138,-32,-34,-35,-36,-38,-39,-41,-42,-51,-58,-57,-56,-52,151,-50,-59,]),'RBRACK':([34,39,74,76,77,78,80,82,83,84,85,87,88,90,108,109,120,121,122,123,124,125,126,127,130,131,132,133,139,140,142,146,153,],[38,41,-54,-33,-37,-40,-43,-46,-47,-48,-49,-53,-55,115,-45,-44,-32,-34,-35,-36,-38,-39,-41,-42,-51,-58,142,-57,146,-56,-52,-50,-59,]),'RPAREN':([42,43,45,46,47,49,52,54,72,74,76,77,78,80,82,83,84,85,87,88,94,95,96,97,108,109,114,120,121,122,123,124,125,126,127,129,130,131,133,140,141,142,146,147,148,149,150,153,154,155,157,],[-65,48,50,-19,-20,-65,-16,-18,-65,-54,-33,-37,-40,-43,-46,-47,-48,-49,-53,-55,116,117,118,-17,-45,-44,133,-32,-34,-35,-36,-38,-39,-41,-42,140,-51,-58,-57,-56,-65,-52,-50,153,-60,-61,-65,-59,-62,-64,-63,]),'P_COMMA':([49,72,74,76,77,78,80,82,83,84,85,87,88,108,109,120,121,122,123,124,125,126,127,130,131,133,140,142,146,150,153,154,155,157,],[53,53,-54,-33,-37,-40,-43,-46,-47,-48,-49,-53,-55,-45,-44,-32,-34,-35,-36,-38,-39,-41,-42,-51,-58,-57,-56,-52,-50,-65,-59,156,-64,-63,]),'OP_ATTR':([56,115,],[64,134,]),'OP_NOT':([64,65,69,70,71,79,81,89,98,100,101,102,103,104,105,106,107,113,128,134,141,156,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'OP_MINUS':([64,65,69,70,71,74,77,78,79,80,81,82,83,84,85,87,88,89,98,100,101,102,103,104,105,106,107,108,109,113,121,122,123,124,125,126,127,128,130,131,133,134,140,141,142,146,153,156,],[79,79,79,79,79,-54,105,-40,79,-43,79,-46,-47,-48,-49,-53,-55,79,79,79,79,79,79,79,79,79,79,-45,-44,79,105,105,105,-38,-39,-41,-42,79,-51,-58,-57,79,-56,79,-52,-50,-59,79,]),'RW_TRUE':([64,65,69,70,71,79,81,89,98,100,101,102,103,104,105,106,107,113,128,134,141,156,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'RW_FALSE':([64,65,69,70,71,79,81,89,98,100,101,102,103,104,105,106,107,113,128,134,141,156,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'RW_NULL':([64,65,69,70,71,79,81,89,98,100,101,102,103,104,105,106,107,113,128,134,141,156,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'NUMBER':([64,65,69,70,71,79,81,89,98,100,101,102,103,104,105,106,107,113,128,134,141,156,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'RW_NEW':([64,65,69,70,71,79,81,89,98,100,101,102,103,104,105,106,107,113,128,134,141,156,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'RW_THIS':([64,65,69,70,71,79,81,89,98,100,101,102,103,104,105,106,107,113,128,134,141,156,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'P_POINT':([74,87,88,131,133,140,153,],[-54,112,-55,-58,-57,-56,-59,]),'OP_MULTIPLY':([74,78,80,82,83,84,85,87,88,108,109,124,125,126,127,130,131,133,140,142,146,153,],[-54,106,-43,-46,-47,-48,-49,-53,-55,-45,-44,106,106,-41,-42,-51,-58,-57,-56,-52,-50,-59,]),'OP_DIVISION':([74,78,80,82,83,84,85,87,88,108,109,124,125,126,127,130,131,133,140,142,146,153,],[-54,107,-43,-46,-47,-48,-49,-53,-55,-45,-44,107,107,-41,-42,-51,-58,-57,-56,-52,-50,-59,]),'OP_PLUS':([74,77,78,80,82,83,84,85,87,88,108,109,121,122,123,124,125,126,127,130,131,133,140,142,146,153,],[-54,104,-40,-43,-46,-47,-48,-49,-53,-55,-45,-44,104,104,104,-38,-39,-41,-42,-51,-58,-57,-56,-52,-50,-59,]),'OP_LESSER':([74,76,77,78,80,82,83,84,85,87,88,108,109,120,121,122,123,124,125,126,127,130,131,133,140,142,146,153,],[-54,101,-37,-40,-43,-46,-47,-48,-49,-53,-55,-45,-44,101,-34,-35,-36,-38,-39,-41,-42,-51,-58,-57,-56,-52,-50,-59,]),'OP_EQUAL':([74,76,77,78,80,82,83,84,85,87,88,108,109,120,121,122,123,124,125,126,127,130,131,133,140,142,146,153,],[-54,102,-37,-40,-43,-46,-47,-48,-49,-53,-55,-45,-44,102,-34,-35,-36,-38,-39,-41,-42,-51,-58,-57,-56,-52,-50,-59,]),'OP_NOT_EQUAL':([74,76,77,78,80,82,83,84,85,87,88,108,109,120,121,122,123,124,125,126,127,130,131,133,140,142,146,153,],[-54,103,-37,-40,-43,-46,-47,-48,-49,-53,-55,-45,-44,103,-34,-35,-36,-38,-39,-41,-42,-51,-58,-57,-56,-52,-50,-59,]),'OP_AND':([74,75,76,77,78,80,82,83,84,85,87,88,90,94,95,96,108,109,114,119,120,121,122,123,124,125,126,127,130,131,132,133,139,140,142,143,146,150,153,157,],[-54,100,-33,-37,-40,-43,-46,-47,-48,-49,-53,-55,100,100,100,100,-45,-44,100,100,-32,-34,-35,-36,-38,-39,-41,-42,-51,-58,100,-57,100,-56,-52,100,-50,100,-59,100,]),'RW_ELSE':([91,99,135,136,137,151,152,],[-25,-30,144,-28,-29,-31,-27,]),'RW_LENGTH':([112,],[130,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'main':([0,],[2,]),'classe_r':([2,],[4,]),'empty':([2,10,16,19,42,49,55,57,63,72,141,150,],[5,14,20,25,47,54,20,67,67,54,149,155,]),'classe':([4,],[7,]),'extends_o':([10,],[12,]),'var_r':([16,55,],[19,63,]),'metodo_r':([19,],[23,]),'var':([19,63,],[24,24,]),'tipo':([19,32,42,53,63,],[26,36,44,62,26,]),'metodo':([23,],[31,]),'params_o':([42,],[45,]),'params':([42,],[46,]),'tipo_r':([49,72,],[52,97,]),'cmd':([51,66,73,116,117,144,],[58,92,92,135,136,152,]),'cmd_r':([57,63,],[66,73,]),'exp':([64,65,69,70,71,89,98,113,128,134,141,156,],[75,90,94,95,96,114,119,132,139,143,150,157,]),'rexp':([64,65,69,70,71,89,98,100,113,128,134,141,156,],[76,76,76,76,76,76,76,120,76,76,76,76,76,]),'aexp':([64,65,69,70,71,89,98,100,101,102,103,113,128,134,141,156,],[77,77,77,77,77,77,77,77,121,122,123,77,77,77,77,77,]),'mexp':([64,65,69,70,71,89,98,100,101,102,103,104,105,113,128,134,141,156,],[78,78,78,78,78,78,78,78,78,78,78,124,125,78,78,78,78,78,]),'sexp':([64,65,69,70,71,79,81,89,98,100,101,102,103,104,105,106,107,113,128,134,141,156,],[80,80,80,80,80,108,109,80,80,80,80,80,80,80,80,126,127,80,80,80,80,80,]),'pexp':([64,65,69,70,71,79,81,89,98,100,101,102,103,104,105,106,107,113,128,134,141,156,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'exps_o':([141,],[147,]),'exps':([141,],[148,]),'exp_r':([150,],[154,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> main classe_r','prog',2,'p_prog','parser.py',8),
  ('classe_r -> classe_r classe','classe_r',2,'p_classe_r','parser.py',13),
  ('classe_r -> empty','classe_r',1,'p_classe_r','parser.py',14),
  ('main -> RW_CLASS ID LCURLY RW_PUBLIC RW_STATIC RW_VOID RW_MAIN LPAREN RW_STRING LBRACK RBRACK ID RPAREN LCURLY cmd RCURLY RCURLY','main',17,'p_main','parser.py',22),
  ('classe -> RW_CLASS ID extends_o LCURLY var_r metodo_r RCURLY','classe',7,'p_classe','parser.py',26),
  ('extends_o -> RW_EXTENDS ID','extends_o',2,'p_extends_o','parser.py',30),
  ('extends_o -> empty','extends_o',1,'p_extends_o','parser.py',31),
  ('var -> tipo ID P_SEMICOLON','var',3,'p_var','parser.py',38),
  ('metodo -> RW_PUBLIC tipo ID LPAREN params_o RPAREN LCURLY var_r cmd_r RW_RETURN exp P_SEMICOLON RCURLY','metodo',13,'p_metodo','parser.py',43),
  ('metodo_r -> metodo_r metodo','metodo_r',2,'p_metodo_r','parser.py',47),
  ('metodo_r -> empty','metodo_r',1,'p_metodo_r','parser.py',48),
  ('var_r -> var_r var','var_r',2,'p_var_r','parser.py',56),
  ('var_r -> empty','var_r',1,'p_var_r','parser.py',57),
  ('cmd_r -> cmd_r cmd','cmd_r',2,'p_cmd_r','parser.py',65),
  ('cmd_r -> empty','cmd_r',1,'p_cmd_r','parser.py',66),
  ('params -> tipo ID tipo_r','params',3,'p_params','parser.py',74),
  ('tipo_r -> P_COMMA tipo ID tipo_r','tipo_r',4,'p_tipo_r','parser.py',79),
  ('tipo_r -> empty','tipo_r',1,'p_tipo_r','parser.py',80),
  ('params_o -> params','params_o',1,'p_params_o','parser.py',88),
  ('params_o -> empty','params_o',1,'p_params_o','parser.py',89),
  ('tipo -> RW_INT LBRACK RBRACK','tipo',3,'p_tipo','parser.py',94),
  ('tipo -> RW_BOOLEAN','tipo',1,'p_tipo','parser.py',95),
  ('tipo -> RW_INT','tipo',1,'p_tipo','parser.py',96),
  ('tipo -> ID','tipo',1,'p_tipo','parser.py',97),
  ('cmd -> LCURLY cmd_r RCURLY','cmd',3,'p_cmd','parser.py',105),
  ('cmd -> RW_IF LPAREN exp RPAREN cmd','cmd',5,'p_cmd','parser.py',106),
  ('cmd -> RW_IF LPAREN exp RPAREN cmd RW_ELSE cmd','cmd',7,'p_cmd','parser.py',107),
  ('cmd -> RW_WHILE LPAREN exp RPAREN cmd','cmd',5,'p_cmd','parser.py',108),
  ('cmd -> RW_SOUT LPAREN exp RPAREN P_SEMICOLON','cmd',5,'p_cmd','parser.py',109),
  ('cmd -> ID OP_ATTR exp P_SEMICOLON','cmd',4,'p_cmd','parser.py',110),
  ('cmd -> ID LBRACK exp RBRACK OP_ATTR exp P_SEMICOLON','cmd',7,'p_cmd','parser.py',111),
  ('exp -> exp OP_AND rexp','exp',3,'p_exp','parser.py',124),
  ('exp -> rexp','exp',1,'p_exp','parser.py',125),
  ('rexp -> rexp OP_LESSER aexp','rexp',3,'p_rexp','parser.py',133),
  ('rexp -> rexp OP_EQUAL aexp','rexp',3,'p_rexp','parser.py',134),
  ('rexp -> rexp OP_NOT_EQUAL aexp','rexp',3,'p_rexp','parser.py',135),
  ('rexp -> aexp','rexp',1,'p_rexp','parser.py',136),
  ('aexp -> aexp OP_PLUS mexp','aexp',3,'p_aexp','parser.py',144),
  ('aexp -> aexp OP_MINUS mexp','aexp',3,'p_aexp','parser.py',145),
  ('aexp -> mexp','aexp',1,'p_aexp','parser.py',146),
  ('mexp -> mexp OP_MULTIPLY sexp','mexp',3,'p_mexp','parser.py',154),
  ('mexp -> mexp OP_DIVISION sexp','mexp',3,'p_mexp','parser.py',155),
  ('mexp -> sexp','mexp',1,'p_mexp','parser.py',156),
  ('sexp -> OP_NOT sexp','sexp',2,'p_sexp','parser.py',164),
  ('sexp -> OP_MINUS sexp','sexp',2,'p_sexp','parser.py',165),
  ('sexp -> RW_TRUE','sexp',1,'p_sexp','parser.py',166),
  ('sexp -> RW_FALSE','sexp',1,'p_sexp','parser.py',167),
  ('sexp -> RW_NULL','sexp',1,'p_sexp','parser.py',168),
  ('sexp -> NUMBER','sexp',1,'p_sexp','parser.py',169),
  ('sexp -> RW_NEW RW_INT LBRACK exp RBRACK','sexp',5,'p_sexp','parser.py',170),
  ('sexp -> pexp P_POINT RW_LENGTH','sexp',3,'p_sexp','parser.py',171),
  ('sexp -> pexp LBRACK exp RBRACK','sexp',4,'p_sexp','parser.py',172),
  ('sexp -> pexp','sexp',1,'p_sexp','parser.py',173),
  ('pexp -> ID','pexp',1,'p_pexp','parser.py',187),
  ('pexp -> RW_THIS','pexp',1,'p_pexp','parser.py',188),
  ('pexp -> RW_NEW ID LPAREN RPAREN','pexp',4,'p_pexp','parser.py',189),
  ('pexp -> LPAREN exp RPAREN','pexp',3,'p_pexp','parser.py',190),
  ('pexp -> pexp P_POINT ID','pexp',3,'p_pexp','parser.py',191),
  ('pexp -> pexp P_POINT ID LPAREN exps_o RPAREN','pexp',6,'p_pexp','parser.py',192),
  ('exps_o -> exps','exps_o',1,'p_exps_o','parser.py',204),
  ('exps_o -> empty','exps_o',1,'p_exps_o','parser.py',205),
  ('exps -> exp exp_r','exps',2,'p_exps','parser.py',210),
  ('exp_r -> exp_r P_COMMA exp','exp_r',3,'p_exp_r','parser.py',215),
  ('exp_r -> empty','exp_r',1,'p_exp_r','parser.py',216),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',224),
]
